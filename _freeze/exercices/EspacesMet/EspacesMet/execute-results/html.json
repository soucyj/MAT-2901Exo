{
  "hash": "1e98c922a53fb98f2ea1e9a0ab73117e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"03 - Espaces métriques\"\nauthor: \"Jérôme Soucy\"\n---\n\n\n\n\n## Question 1\n\nSoit $P(x_1,y_1)$ et $Q(x_2,y_2)$ des éléments de $\\mathbb{R}^2$. Déterminez si les fonctions suivantes sont des métriques sur $\\mathbb{R}^2$. Dans chacun des cas, justifiez votre réponse.\n\n1. $d(P,Q) = |x_1-x_2| + |y_1-y_2|$\n\n   ::: solution\n   Oui, c'est la distance euclidienne.\n   :::\n\n2. $d(P,Q) = |x_1-x_2| \\cdot |y_1-y_2|$\n\n   ::: solution\n   Non, par exemple $d((1,0),(1,1))=0$ alors que les points $(1,0)$ et $(1,1)$ sont distincts. Cela contredit la propriété d'une métrique voulant que $d(P,Q)=0\\Rightarrow P=Q$.\n   :::\n\n3. $d(P,Q) = |x_1+x_2| + |y_1+y_2|$\n\n   ::: solution\n   Non, par exemple $d((1,0),(-1,0))=0$ alors que les points $(1,0)$ et $(-1,0)$ sont distincts. Cela contredit la propriété d'une métrique voulant que $d(P,Q)=0\\Rightarrow P=Q$.\n   :::\n\n\n## Question 2\n\nSoit l'espace métrique $\\left(\\mathbb{R}^2,d\\right)$, où $d$ est la métrique définie par \n$$\nd\\left((x_1,y_1),(x_2,y_2)\\right) = |x_1-x_2| + 2|y_1-y_2|.\n$$\nDessinez la boule ouverte centrée à l'origine de rayon $r$.\n\n::: solution\nL'intérieur du losange de sommets $\\left(0,\\frac{1}{2}\\right), \\left(1,0\\right), \\left(0,-\\frac{1}{2}\\right), \\left(-1,0\\right)$.\n:::\n\n\n## Question 3\n\nEst-ce que l'espace métrique $\\left(\\mathbb{R} \\setminus \\mathbb{Q}, d_E\\right)$ est complet? Justifiez.\n\n::: solution\nNon. Il suffit de considérer une suite de nombres irrationnels qui converge vers un nombre rationnels. Par exemple, la suite $(x_n)$ où $x_n=\\frac{\\sqrt{2}}{n}$ est une suite de Cauchy dans $\\mathbb{R} \\setminus \\mathbb{Q}$ qui converge vers $0$, un nombre qui n'est pas dans cet ensemble.\n:::\n\n\n## Question 4\n\nDonnez le terme général d'une suite $(x_n)$ de nombres rationnels qui converge vers $\\sqrt{2}$, faisant de $\\left(\\mathbb{Q}, d_E\\right)$ un espace métrique qui n'est pas complet.\n\n::: solution\nPlusieurs réponses possibles, le graphe de la fonction $f(x)=x^2-2$ et la construction de tangentes bien choisies peut vous suggérer une méthode.\n:::\n\n\n## Question 5\n\nVrai ou faux avec justification. Soit $(x_n)$ une suite dans un espace métrique $\\left(E,d\\right)$. Si \n$$\nd(x_n,a) < \\frac{1}{n} \\text{ pour tout } n \\geq 1000,\n$$\nalors $a \\in E$.\n\n::: solution\nFaux, la suite considérée à la question 3 fourni un contre-exemple.\n:::\n\n\n## Question 6\n\nPour chacun des ensembles ci-dessous, considérés dans l'espace métrique $\\left(\\mathbb{R}^2, d_E\\right)$, déterminez lesquelles des caractéristiques suivantes sont possédées par l'ensemble : **Fermé**, **Ouvert**, **Borné**, **Compact**. Donnez aussi une représentation graphique de l'ensemble.\n\n1. $\\left\\{(x,y)\\in\\mathbb{R}^2 : -1 < x < 1 ~\\text{et}~ 0 \\leq y \\leq 1\\right\\}$\n\n   ::: solution\n   Borné\n\n\n   ::: {#81313e9f .cell execution_count=1}\n   ``` {.python .cell-code}\n   import matplotlib.pyplot as plt\n   import numpy as np\n   \n   # Création de la figure et des axes\n   fig, ax = plt.subplots(figsize=(6, 6))\n   \n   # Dessiner la région remplie entre x = -1 et x = 1, y entre 0 et 1\n   x_fill = np.linspace(-1, 1, 1000)  # Points pour remplir le rectangle\n   y_bottom = np.zeros_like(x_fill)   # Bas de la région y = 0\n   y_top = np.ones_like(x_fill)       # Haut de la région y = 1\n   \n   ax.fill_between(x_fill, y_bottom, y_top, where=(x_fill > -1) & (x_fill < 1),\n   color='skyblue', alpha=0.5, label='-1 < x < 1, 0 ≤ y ≤ 1')\n   \n   # Tracer les segments horizontaux (inclus dans l'ensemble)\n   ax.hlines(y=0, xmin=-1, xmax=1, color='blue', linestyle='-', linewidth=2)\n   ax.hlines(y=1, xmin=-1, xmax=1, color='blue', linestyle='-', linewidth=2)\n   \n   # Tracer les lignes verticales pointillées aux limites x = -1 et x = 1 dans y ∈ [0, 1]\n   y_vertical = np.linspace(0, 1, 100)  # y de 0 à 1\n   ax.plot([-1] * len(y_vertical), y_vertical, 'b--', linewidth=2)  # x = -1\n   ax.plot([1] * len(y_vertical), y_vertical, 'b--', linewidth=2)   # x = 1\n   \n   # Ajouter les axes x et y qui s'intersectent en (0,0)\n   ax.axhline(0, color='black', linewidth=1)  # Axe des x\n   ax.axvline(0, color='black', linewidth=1)  # Axe des y\n   \n   # Configuration des limites et des graduations\n   ax.set_xlim(-1.5, 1.5)\n   ax.set_ylim(-0.5, 1.5)\n   ax.set_xticks(np.arange(-1.5, 1.6, 0.5))  # Graduations sur x\n   ax.set_yticks(np.arange(-0.5, 1.6, 0.5))  # Graduations sur y\n   \n   # Étiquettes des axes\n   ax.set_xlabel('$x$', fontsize=12)\n   ax.set_ylabel('$y$', fontsize=12)\n   ax.set_title(r\"Ensemble : $-1 < x < 1$ et $0 \\leq y \\leq 1$\", fontsize=14)\n   \n   # Affichage de la grille pour une meilleure lisibilité\n   ax.grid(True, linestyle='--', alpha=0.5)\n   \n   # Affichage du graphique\n   plt.show()\n   ```\n   \n   ::: {.cell-output .cell-output-display}\n   ![](EspacesMet_files/figure-html/cell-2-output-1.png){width=539 height=529}\n   :::\n   :::\n   \n   \n   :::\n\n2. $\\left\\{(x,y)\\in\\mathbb{R}^2 : y = x^2\\right\\}$\n\n   ::: solution\n   Fermé\n\n\n   ::: {#032fc568 .cell execution_count=2}\n   ``` {.python .cell-code}\n   import matplotlib.pyplot as plt\n   import numpy as np\n   \n   # Création de la figure et des axes\n   fig, ax = plt.subplots(figsize=(6, 6))\n   \n   # Définir les données pour la parabole y = x^2\n   x = np.linspace(-3, 3, 1000)  # Points entre -3 et 3\n   y = x**2  # Parabole\n   \n   # Tracer la parabole\n   ax.plot(x, y, color='blue', linewidth=2)\n   \n   # Ajouter les axes x et y qui s'intersectent en (0, 0)\n   ax.axhline(0, color='black', linewidth=1)  # Axe des x\n   ax.axvline(0, color='black', linewidth=1)  # Axe des y\n   \n   # Configuration des limites et des graduations\n   ax.set_xlim(-3.5, 3.5)\n   ax.set_ylim(-0.5, 10)\n   ax.set_xticks(np.arange(-3, 4, 1))  # Graduations sur x\n   ax.set_yticks(np.arange(0, 11, 2))  # Graduations sur y\n   \n   # Étiquettes des axes\n   ax.set_xlabel('$x$', fontsize=12)\n   ax.set_ylabel('$y$', fontsize=12)\n   ax.set_title(r\"Parabole $y = x^2$\", fontsize=14)\n   \n   \n   # Affichage de la grille pour une meilleure lisibilité\n   ax.grid(True, linestyle='--', alpha=0.5)\n   \n   # Affichage du graphique\n   plt.show()\n   ```\n   \n   ::: {.cell-output .cell-output-display}\n   ![](EspacesMet_files/figure-html/cell-3-output-1.png){width=513 height=532}\n   :::\n   :::\n   \n   \n   :::\n\n3. $\\left\\{(x,y)\\in\\mathbb{R}^2 : |x| = |y| ~\\text{et}~ -1 \\leq x \\leq 1\\right\\}$\n\n   ::: solution\n   Borné, fermé et compact\n\n\n   ::: {#3ea367d0 .cell execution_count=3}\n   ``` {.python .cell-code}\n   import matplotlib.pyplot as plt\n   import numpy as np\n   \n   # Création de la figure et des axes\n   fig, ax = plt.subplots(figsize=(6, 6))\n   \n   x = np.linspace(-1, 1, 1000)  # Points entre -3 et 3\n   y = x\n   \n   # Tracer la parabole\n   ax.plot(x, y, color='blue', linewidth=2)\n   y=-x\n   ax.plot(x, y, color='blue', linewidth=2)\n   \n   # Ajouter les axes x et y qui s'intersectent en (0, 0)\n   ax.axhline(0, color='black', linewidth=1)  # Axe des x\n   ax.axvline(0, color='black', linewidth=1)  # Axe des y\n   \n   # Configuration des limites et des graduations\n   ax.set_xlim(-1.5, 1.5)\n   ax.set_ylim(-1.5, 1.5)\n   ax.set_xticks(np.arange(-1, 1, 1))  # Graduations sur x\n   ax.set_yticks(np.arange(-1, 1, 1))  # Graduations sur y\n   \n   # Étiquettes des axes\n   ax.set_xlabel('$x$', fontsize=12)\n   ax.set_ylabel('$y$', fontsize=12)\n   \n   # Affichage de la grille pour une meilleure lisibilité\n   ax.grid(True, linestyle='--', alpha=0.5)\n   \n   # Affichage du graphique\n   plt.show()\n   ```\n   \n   ::: {.cell-output .cell-output-display}\n   ![](EspacesMet_files/figure-html/cell-4-output-1.png){width=515 height=506}\n   :::\n   :::\n   \n   \n   :::\n\n4. $\\left\\{(x,y)\\in\\mathbb{R}^2 : 0 < y < 1\\right\\}$\n\n   ::: solution\n   Ouvert\n\n\n   ::: {#c1c9bed5 .cell execution_count=4}\n   ``` {.python .cell-code}\n   import matplotlib.pyplot as plt\n   import numpy as np\n   \n   # Création de la figure et des axes\n   fig, ax = plt.subplots(figsize=(6, 6))\n   \n   # Dessiner la région remplie entre x = -1 et x = 1, y entre 0 et 1\n   x_fill = np.linspace(-2, 2, 1000)  # Points pour remplir le rectangle\n   y_bottom = np.zeros_like(x_fill)   # Bas de la région y = 0\n   y_top = np.ones_like(x_fill)       # Haut de la région y = 1\n   \n   ax.fill_between(x_fill, y_bottom, y_top, where=(x_fill > -2) & (x_fill < 2),\n   color='skyblue', alpha=0.5, label='0 < y < 1')\n   \n   # Tracer les segments horizontaux (inclus dans l'ensemble)\n   ax.hlines(y=0, xmin=-2, xmax=2, color='blue', linestyle='--', linewidth=2)\n   ax.hlines(y=1, xmin=-2, xmax=2, color='blue', linestyle='--', linewidth=2)\n   \n   # Tracer les lignes verticales pointillées aux limites x = -1 et x = 1 dans y ∈ [0, 1]\n    #  y_vertical = np.linspace(0, 1, 100)  # y de 0 à 1\n    #  ax.plot([-1] * len(y_vertical), y_vertical, 'b--', linewidth=2)  # x = -1\n    #  ax.plot([1] * len(y_vertical), y_vertical, 'b--', linewidth=2)# x = 1\n   \n   # Ajouter les axes x et y qui s'intersectent en (0,0)\n   ax.axhline(0, color='black', linewidth=1)  # Axe des x\n   ax.axvline(0, color='black', linewidth=1)  # Axe des y\n   \n   # Configuration des limites et des graduations\n   ax.set_xlim(-2, 2)\n   ax.set_ylim(-0.5, 1.5)\n   ax.set_xticks(np.arange(-1.5, 1.6, 0.5))  # Graduations sur x\n   ax.set_yticks(np.arange(-0.5, 1.6, 0.5))  # Graduations sur y\n   \n   # Étiquettes des axes\n   ax.set_xlabel('$x$', fontsize=12)\n   ax.set_ylabel('$y$', fontsize=12)\n   \n   # Affichage de la grille pour une meilleure lisibilité\n   ax.grid(True, linestyle='--', alpha=0.5)\n   \n   # Affichage du graphique\n   plt.show()\n   ```\n   \n   ::: {.cell-output .cell-output-display}\n   ![](EspacesMet_files/figure-html/cell-5-output-1.png){width=528 height=511}\n   :::\n   :::\n   \n   \n   :::\n\n5. $\\left\\{(x,y)\\in\\mathbb{R}^2 : |x|+|y| < 1\\right\\}$\n\n   ::: solution\n   Ouvert et borné\n\n\n   ::: {#c20dc9f6 .cell execution_count=5}\n   ``` {.python .cell-code}\n   import matplotlib.pyplot as plt\n   import numpy as np\n   \n   # Création de la figure et des axes\n   fig, ax = plt.subplots(figsize=(6, 6))\n   \n   # Générer les points pour tracer la frontière |x| + |y| = 1\n   x = np.linspace(-1, 1, 500)  # Intervalle pour x\n   y1 = 1 - np.abs(x)           # y positif pour la frontière\n   y2 = -(1 - np.abs(x))        # y négatif pour la frontière\n   \n   # Tracer la région remplie à l'intérieur de la frontière\n   x_fill = np.linspace(-1, 1, 500)\n   for x_i in x_fill:\n      ax.fill_between([x_i], -(1 - abs(x_i)), 1 - abs(x_i), color='skyblue', alpha=0.5)\n   \n   # Tracer la frontière en pointillés (|x| + |y| = 1)\n   ax.plot(x, y1, 'b--', linewidth=2)  # Partie supérieure\n   ax.plot(x, y2, 'b--', linewidth=2)  # Partie inférieure\n   \n   # Ajouter les axes x et y qui s'intersectent en (0,0)\n   ax.axhline(0, color='black', linewidth=1)  # Axe des x\n   ax.axvline(0, color='black', linewidth=1)  # Axe des y\n   \n   # Configuration des limites et des graduations\n   ax.set_xlim(-1.2, 1.2)\n   ax.set_ylim(-1.2, 1.2)\n   ax.set_xticks(np.arange(-1, 1.1, 0.5))  # Graduations sur x\n   ax.set_yticks(np.arange(-1, 1.1, 0.5))  # Graduations sur y\n   \n   # Étiquettes des axes\n   ax.set_xlabel('$x$', fontsize=12)\n   ax.set_ylabel('$y$', fontsize=12)\n   ax.set_title(r\"Région : $|x| + |y| < 1$\", fontsize=14)\n   \n   # Affichage de la grille pour une meilleure lisibilité\n   ax.grid(True, linestyle='--', alpha=0.5)\n   \n   # Affichage du graphique\n   plt.show()\n   ```\n   \n   ::: {.cell-output .cell-output-display}\n   ![](EspacesMet_files/figure-html/cell-6-output-1.png){width=528 height=530}\n   :::\n   :::\n   \n   \n   :::\n\n6. $\\left\\{(x,y)\\in\\mathbb{R}^2 : x^2 + y^2 = 1\\right\\}$\n\n   ::: solution\n   Borné, fermé et compact\n\n\n   ::: {#2d3bc7bd .cell execution_count=6}\n   ``` {.python .cell-code}\n   import matplotlib.pyplot as plt\n   import numpy as np\n   \n   # Création de la figure et des axes\n   fig, ax = plt.subplots(figsize=(6, 6))\n   \n   # Paramètres pour tracer le cercle x^2 + y^2 = 1\n   theta = np.linspace(0, 2 * np.pi, 1000)  # Paramètre pour la circonférence\n   x = np.cos(theta)  # Coordonnées x sur le cercle\n   y = np.sin(theta)  # Coordonnées y sur le cercle\n   \n   # Tracer la frontière du cercle en pointillés\n   ax.plot(x, y, linestyle='-', color='blue', linewidth=2, label=r'$x^2 + y^2 = 1$')\n   \n   # Ajouter les axes x et y qui s'intersectent en (0,0)\n   ax.axhline(0, color='black', linewidth=1)  # Axe des x\n   ax.axvline(0, color='black', linewidth=1)  # Axe des y\n   \n   # Configuration des limites et des graduations\n   ax.set_xlim(-1.5, 1.5)\n   ax.set_ylim(-1.5, 1.5)\n   ax.set_aspect('equal')  # Assure un repère orthonormé\n   ax.set_xticks(np.arange(-1.5, 1.6, 0.5))  # Graduations sur x\n   ax.set_yticks(np.arange(-1.5, 1.6, 0.5))  # Graduations sur y\n   \n   # Étiquettes des axes et titre\n   ax.set_xlabel('$x$', fontsize=12)\n   ax.set_ylabel('$y$', fontsize=12)\n   ax.set_title(r\"Frontière : $x^2 + y^2 = 1$\", fontsize=14)\n   \n   # Affichage de la grille pour une meilleure lisibilité\n   ax.grid(True, linestyle='--', alpha=0.5)\n   \n   # Affichage du graphique\n   plt.show()\n   ```\n   \n   ::: {.cell-output .cell-output-display}\n   ![](EspacesMet_files/figure-html/cell-7-output-1.png){width=536 height=532}\n   :::\n   :::\n   \n   \n   :::\n\n## Question 7\n\n   Soit $(E,d)$ un espace métrique et soit $f:E\\rightarrow E$, une contration. Montrez que $f$ est continue. Rappelons qu'un fonction $f$ est continue en $x_0$ si pour tout $\\varepsilon>0$, il existe $\\delta>0$ tel que\n\t\t$$x\\in E~\\text{et}~d(x_0,x)<\\delta\\Rightarrow d(f(x_0),f(x))<\\varepsilon.$$\n\n## Question 8\n\nAssurez-vous de pouvoir définir sans aide chacun des objets mathématiques ci-dessous. Vérifiez vos réponses dans les notes de cours.\n\n- Une contraction sur $\\left(\\mathbb{R}^2,d_E\\right)$.\n- Un sous-ensemble borné de $\\left(\\mathbb{R}^2,d_E\\right)$.\n- Un sous-ensemble fermé de $\\left(\\mathbb{R}^2,d_E\\right)$.\n- Un sous-ensemble compact de $\\left(\\mathbb{R}^2,d_E\\right)$.\n- Une métrique sur un ensemble $X$.\n- Un espace métrique.\n- Une suite de Cauchy dans un espace métrique $(X,d)$.\n- Un espace métrique complet.\n\n",
    "supporting": [
      "EspacesMet_files"
    ],
    "filters": [],
    "includes": {}
  }
}